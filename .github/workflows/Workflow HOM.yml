name: 2 - Workflow para Hom  # Nome do workflow para homologação

on:
  push:  # Aciona o workflow em caso de push
    branches:  # Define as branches que acionam o workflow
      - develop  # O workflow é executado quando há um push na branch develop

jobs:
  run-tests:  # Definição do job que vai rodar os testes
    runs-on: ubuntu-latest  # Define o ambiente para execução (Ubuntu)

    steps:
      - name: Checkout do repositório  # Passo para fazer checkout do repositório
        uses: actions/checkout@v3  # Usa a ação padrão para fazer checkout do código

      - name: Configurar o Python  # Passo para configurar a versão do Python
        uses: actions/setup-python@v4  # Usa a ação para configurar o Python
        with:
          python-version: '3.9'  # Define a versão do Python a ser usada

      - name: Instalar dependências  # Passo para instalar dependências do projeto
        run: |  # Executa os comandos abaixo em um shell
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências listadas no requirements.txt

      - name: Rodar testes unitários  # Passo para rodar os testes
        run: |  # Executa os comandos abaixo em um shell
          pytest tests/test_geometria.py  # Executa os testes unitários com pytest

      - name: Criar nova versão  # Passo para criar uma nova versão
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Usa o token de autenticação do GitHub
        run: |  # Executa os comandos abaixo em um shell
          last_release=$(git tag | sort -V | tail -n 1)  # Obtém a última tag de release
          version_number=$(( $(echo "${last_release}" | sed 's/release-//') + 1 ))  # Incrementa o número da versão
          git checkout -b release-"$version_number"  # Cria uma nova branch chamada release-X (X é o número da versão)
          git push origin release-"$version_number"  # Faz push da nova branch para o repositório remoto
