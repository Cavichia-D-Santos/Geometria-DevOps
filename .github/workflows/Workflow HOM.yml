name: 2 - Workflow para Hom  # Nome do workflow para homologação

on:
  push:
    branches:
      - develop  # O workflow é acionado apenas na branch 'develop'

jobs:
  run-tests:  # Job para executar os testes
    runs-on: ubuntu-latest  # Define o ambiente para execução

    steps:
      - name: Checkout do repositório  # Clona o repositório
        uses: actions/checkout@v3

      - name: Configurar o Python  # Configura a versão do Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Define a versão do Python

      - name: Instalar dependências  # Instala as dependências do projeto
        run: |
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências

      - name: Rodar testes unitários  # Executa os testes
        run: |
          pytest tests/test_geometria.py

  create-release-branch:  # Job para criar uma nova branch de release
    runs-on: ubuntu-latest  # Define o ambiente para execução
    needs: run-tests  # Este job depende que o job 'run-tests' tenha sido concluído com sucesso

    steps:
      - name: Checkout do repositório  # Clona o repositório novamente
        uses: actions/checkout@v3

      - name: Criar nova branch de release  # Cria uma nova branch de release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Usa o token de autenticação do GitHub
        run: |
          # Obtém a última tag de release e incrementa o número
          version=$(git tag --list 'release-*' | sort -V | tail -n 1 | sed 's/release-//') || true  # Adiciona || true para evitar erro se não houver tag
          new_version=$((version + 1))  # Incrementa a versão
          branch_name="release-${new_version}"  # Nome da nova branch

          git checkout -b "$branch_name"  # Cria a nova branch
          git push --set-upstream origin "$branch_name"  # Faz push da nova branch
