name: 2 - Workflow para Hom  # Nome do workflow para homologação

on:
  push:
    branches:
      - develop  # O workflow é executado apenas na branch 'develop'

jobs:
  run-tests:  # Job para executar os testes
    runs-on: ubuntu-latest  # Define o ambiente para execução (Ubuntu)

    steps:
      - name: Checkout do repositório  # Passo para fazer checkout do repositório
        uses: actions/checkout@v3  # Usa a ação padrão para fazer checkout do código

      - name: Configurar o Python  # Passo para configurar a versão do Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Instalar dependências  # Passo para instalar as dependências do projeto
        run: |  # Executa os comandos abaixo em um shell
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências

      - name: Rodar testes unitários  # Passo para rodar os testes unitários
        run: |
          pytest tests/test_geometria.py  # Executa os testes

  create-release-branch:  # Job para criar uma nova branch de release
    runs-on: ubuntu-latest  # Define o ambiente para execução (Ubuntu)
    needs: run-tests  # Este job depende que o job 'run-tests' tenha sido concluído com sucesso
    if: success()  # Somente cria a branch de release se os testes passarem

    steps:
      - name: Checkout do repositório  # Passo para fazer checkout do repositório novamente
        uses: actions/checkout@v3  # Necessário para garantir que o repositório esteja disponível

      - name: Obter número da versão atual  # Passo para obter a versão atual da release
        id: get-version  # Atribui um ID a este passo para referenciá-lo posteriormente
        run: |
          version=$(git tag --list 'release-*' | sort -V | tail -n 1 | sed 's/release-//')  # Obtém a última tag de release
          if [ -z "$version" ]; then
            version=0  # Inicia a contagem a partir de 0 se não houver versões
          fi
          new_version=$((version + 1))  # Incrementa o número da versão
          echo "::set-output name=new_version::release-${new_version}"  # Define a nova versão

      - name: Atualizar branch remota antes de criar nova branch de release  # Passo para garantir que a branch local está atualizada
        run: |
          git fetch origin  # Obtém as informações mais recentes do repositório remoto
          git checkout develop  # Certifique-se de estar na branch develop
          git pull origin develop  # Atualiza a branch develop local com as alterações remotas

      - name: Criar nova branch de release  # Passo para criar uma nova branch de release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Usa o token de autenticação do GitHub
        run: |
          git checkout -b ${{ steps.get-version.outputs.new_version }}  # Cria uma nova branch com o nome da nova versão
          git push origin ${{ steps.get-version.outputs.new_version }}  # Faz push da nova branch para o repositório remoto
