name: 2 - Workflow para Hom # Nome do workflow para homologação

on:
  push:
    branches:
      - develop # O workflow é acionado apenas na branch 'develop'

jobs:
  run-tests: # Job para executar os testes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório # Clona o repositório
        uses: actions/checkout@v3

      - name: Configurar o Python # Configura a versão do Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Instalar dependências # Instala as dependências do projeto
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Rodar testes unitários # Executa os testes
        run: |
          pytest tests/

  create-release-pr: # Job para criar Pull Request de release
    runs-on: ubuntu-latest
    needs: run-tests # Este job depende do sucesso do job run-tests
    if: success() # Executa apenas se o job anterior for bem-sucedido
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3

      - name: Gera próxima versão de release baseada em tag (sem conflitos)
        id: release_name
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          PATCH=$((10#$PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"

          while git ls-remote --exit-code --heads origin "release/${NEXT_VERSION}" > /dev/null 2>&1; do
            PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          done
          echo "RELEASE_NAME=release/${NEXT_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
      