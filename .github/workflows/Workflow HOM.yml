name: 2 - Workflow para Hom  # Nome do workflow para homologação

on:
  push:
    branches:
      - develop  # O workflow é acionado apenas na branch 'develop'

jobs:
  run-tests:  # Job para executar os testes
    runs-on: ubuntu-latest  # Define o ambiente para execução

    steps:
      - name: Checkout do repositório  # Clona o repositório
        uses: actions/checkout@v3

      - name: Configurar o Python  # Configura a versão do Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Define a versão do Python

      - name: Instalar dependências  # Instala as dependências do projeto
        run: |
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências

      - name: Rodar testes unitários  # Executa os testes
        run: |
          pytest tests/test_geometria.py

  create-release-branch:
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()  # Só cria a branch de release se os testes passarem

    steps:
      - name: Checkout do repositório  # Clona o repositório novamente
        uses: actions/checkout@v3

      - name: Obter número da versão atual
        id: get-version
        run: |
          git fetch --tags  # Faz fetch das tags do repositório remoto
          version=$(git tag --list 'release-*' | sort -V | tail -n 1 | sed 's/release-//')  # Extrai a última versão
          if [ -z "$version" ]; then
            version=0  # Se não houver versão, inicia com 0
          fi
          new_version=$((version + 1))  # Incrementa a versão
          echo "new_version=release-${new_version}" >> $GITHUB_ENV  # Define a nova versão como variável de ambiente

      - name: Criar nova branch de release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git checkout -b ${{ env.new_version }}  # Cria uma nova branch com a nova versão
          git push origin ${{ env.new_version }}  # Faz push da nova branch de release
