name: 2 - Workflow para Hom # Nome do workflow para homologação
on:
  push:
    branches:
      - develop # O workflow é acionado apenas na branch 'develop'
jobs:
<<<<<<< Updated upstream
  run-tests:  # Job para executar os testes
    runs-on: ubuntu-latest  # Define o ambiente para execução

    steps:
      - name: Checkout do repositório  # Clona o repositório
        uses: actions/checkout@v3

      - name: Configurar o Python  # Configura a versão do Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Define a versão do Python

      - name: Instalar dependências  # Instala as dependências do projeto
        run: |
          python -m pip install --upgrade pip  # Atualiza o pip
          pip install -r requirements.txt  # Instala as dependências

      - name: Rodar testes unitários  # Executa os testes
        run: |
          pytest tests/

  create-release-pr:
=======
  run-tests: # Job para executar os testes
>>>>>>> Stashed changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v3
      - name: Configurar o Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Instalar dependências
        run: |
<<<<<<< Updated upstream
          VERSION=$(python setup.py --version)

          git checkout main
          git pull origin main
          git checkout -b release/$VERSION

          git push origin release/$VERSION

          # Cria o Pull Request da branch release para main
          gh pr create --base main --head release/$VERSION --title "Release $VERSION" --body "Pull Request para a versão de release $VERSION"
=======
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Rodar testes unitários
        run: |
          pytest tests/test_geometria.py
  create-release-pr:
    runs-on: ubuntu-latest
    needs: run-tests
    if: success()
    steps:
    - name: Checkout do repositório
      uses: actions/checkout@v3
    - name: Gera próxima versão de release baseada em tag
      id: release_name
      run: |
        git fetch --tags
        LAST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
        if [[ -z "$LAST_TAG" ]]; then
          NEXT_VERSION="0.1.0"
        else
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_TAG"
          PATCH=$((10#$PATCH + 1))
          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        fi
        echo "RELEASE_NAME=release/${NEXT_VERSION}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
    - name: Criar Pull Request para a branch release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git fetch origin
        git checkout main
        git pull origin main
        git checkout -b $RELEASE_NAME
        git push origin $RELEASE_NAME
        gh pr create --base main --head $RELEASE_NAME --title "Release $RELEASE_VERSION" --body "Pull Request para a branch de release $RELEASE_VERSION"
>>>>>>> Stashed changes
